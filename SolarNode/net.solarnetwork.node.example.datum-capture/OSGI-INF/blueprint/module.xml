<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- The DatumQueue provides access to local database storage for our datum. -->
	<bean id="datumQueue" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.service.DatumQueue"/>
		<property name="sticky" value="true"/>
	</bean>

	<!-- The PlaceholderService can resolve placeholder values at runtime, for example 
	     in the sourceId of our data source. -->
	<bean id="placeholderService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.service.PlaceholderService"/>
		<property name="sticky" value="true"/>
	</bean>

	<!-- The DatumMetadataService allows our data source to publish metadata, such as the device
	     manufacturer or serial number, to SolarNetwork. -->
	<bean id="datumMetadataService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.service.DatumMetadataService"/>
		<property name="sticky" value="true"/>
	</bean>

	<!-- support localized strings for the settings in the GUI -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<array>
				<value>net.solarnetwork.node.example.datum_capture.FoobarDatumDataSource</value>
				<value>net.solarnetwork.node.service.support.DatumDataSourceSupport</value>
				<value>net.solarnetwork.service.support.BasicIdentifiable</value>
			</array>
		</property>
	</bean>
	
	<!-- support localized strings for the periodic job settings in the GUI -->
	<bean id="jobMessageSource" class="net.solarnetwork.support.PrefixedMessageSource">
		<property name="prefix" value="datumDataSource."/>
		<property name="delegate" ref="messageSource"/>
	</bean>	

	<!-- publish a "component factory" so our Foobar Inverter appears in the settings GUI -->
	<service interface="net.solarnetwork.settings.SettingSpecifierProviderFactory">
		<bean class="net.solarnetwork.settings.support.BasicSettingSpecifierProviderFactory">
			<property name="displayName" value="Foobar Power"/>
			<property name="factoryUid" value="net.solarnetwork.node.example.datum_capture.foobar"/>
			<property name="messageSource" ref="messageSource"/>
		</bean>
	</service>

	<!-- Register a managed-service factory so individual FoobarDatumDataSource component instances
	     can be created in the setting GUI and then configured. We register a ManagedJob service
	     so SolarNode polls the data source for datum at the configured schedule. -->
	<osgix:managed-service-factory factory-pid="net.solarnetwork.node.example.datum_capture.foobar" 
			autowire-on-update="true" update-method="configurationChanged">
		<osgix:interfaces>
			<beans:value>net.solarnetwork.node.job.ManagedJob</beans:value>
		</osgix:interfaces>
		
		<!-- SimpleManagedJob is the class that implements ManagedJob for us, and delegates
			 to the DatumDataSourcePollManagedJob to poll for datum from our data source -->
		<bean class="net.solarnetwork.node.job.SimpleManagedJob" 
				init-method="serviceDidStartup" destroy-method="serviceDidShutdown">
			<argument>
				<bean class="net.solarnetwork.node.job.DatumDataSourcePollManagedJob">
					<property name="datumMetadataService" ref="datumMetadataService"/>
					<property name="datumQueue" ref="datumQueue"/>
					<property name="datumDataSource">
					
						<!-- Here is our DatumDataSource, which will generate datum when polled by 
						     the DatumDataSourcePollManagedJob job -->
						<bean class="net.solarnetwork.node.example.datum_capture.FoobarDatumDataSource">
							<property name="messageSource" ref="jobMessageSource"/>
							<property name="placeholderService" ref="placeholderService"/>
						</bean>
					</property>
				</bean>
			</argument>

			<!-- the schedule defines when the ManagedJob runs; in this case
			     we define a cron style trigger, that by default runs once/minute -->
			<argument value="0 * * * * ?"/>

			<!-- we can also publish the FoobarDatumDataSource instance itself as a service
			     by configuring serviceProviderConfigurations here... this is optional but
			     generally a good idea -->
			<property name="serviceProviderConfigurations">
				<map>
					<entry key="datumDataSource">
						<bean class="net.solarnetwork.node.job.SimpleServiceProviderConfiguration">
							<property name="interfaces">
								<list>
									<value>net.solarnetwork.node.service.DatumDataSource</value>
								</list>
							</property>
							<property name="properties">
								<map>
									<entry key="datumClassName" value="net.solarnetwork.domain.datum.AcDcEnergyDatum"/>
								</map>
							</property>
						</bean>
					</entry>
				</map>
			</property>
		</bean>

	</osgix:managed-service-factory>

</blueprint>
